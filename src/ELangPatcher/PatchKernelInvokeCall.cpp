#include "ELangPatcherImpl.h"
#include "VArgsProxyGen.h"

void ELangPatcherImpl::PatchKernelInvokeCall() {
    std::vector<ELang::PatternSearch::SearchMatcher> patterns{
            ELang::PatternSearch::SearchMatcher{{
                    {0x8D, 0x54, 0x24, 0x08, 0x83, 0xEC, 0x0C, 0x52, 0xFF, 0x74, 0x24, 0x14, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x0C, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x10, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x54, 0x24, 0x08, 0x52, 0xFF, 0xD3, 0x8B, 0x44, 0x24, 0x0C, 0x8B, 0x54, 0x24, 0x10, 0x8B, 0x4C, 0x24, 0x14, 0x83, 0xC4, 0x18, 0xC3},
            }},
            ELang::PatternSearch::SearchMatcher{{
                    {0x8D, 0x44, 0x24, 0x08, 0x83, 0xEC, 0x0C, 0x50, 0xFF, 0x74, 0x24, 0x14, 0x33, 0xC0, 0x89, 0x44, 0x24, 0x08, 0x89, 0x44, 0x24, 0x0C, 0x89, 0x44, 0x24, 0x10, 0x8D, 0x54, 0x24, 0x08, 0x52, 0xFF, 0xD3, 0x8B, 0x44, 0x24, 0x0C, 0x8B, 0x54, 0x24, 0x10, 0x8B, 0x4C, 0x24, 0x14, 0x83, 0xC4, 0x18, 0xC3},
            }},
    };

    int pattern_id{0};
    for (auto &pattern: patterns) {
        auto pattern_size = pattern.size();

        for (auto it = data_.begin(); (it = pattern.search(it, data_.end())) != data_.end(); it += pattern_size) {
            auto offset = std::distance(data_.begin(), it);

            auto padding_beg = rand_int(2, 7);
            auto padding_end = rand_int(2, 7);
            auto snippet = GenerateVArgsProxyCode();

            auto ptr_output = pe_.ExpandTextSection(padding_beg + snippet.size() + padding_end);
            it = data_.begin() + offset;

            fprintf(stderr, "  INFO: [PatchKernelInvokeCall#%d] found (offset=0x%08tx, len=%04x, replace_len=%04x)\n", pattern_id, offset, static_cast<int>(pattern_size), static_cast<int>(snippet.size()));

            std::generate_n(ptr_output, padding_beg, mt_);
            std::copy(snippet.cbegin(), snippet.cend(), ptr_output + padding_beg);
            std::generate_n(ptr_output + padding_beg + snippet.size(), padding_end, mt_);

            std::generate_n(it, pattern.size(), mt_);
            write_jmp(offset, ptr_output + padding_beg - data_.data());
        }
        pattern_id++;
    }
}
